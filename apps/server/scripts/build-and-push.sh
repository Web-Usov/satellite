#!/bin/bash

# Server Build and Push Script
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
ENV_FILE="$SCRIPT_DIR/.env"
if [ -f "$ENV_FILE" ]; then
    echo -e "${GREEN}üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env...${NC}"
    set -a
    source "$ENV_FILE"
    set +a
else
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $SCRIPT_DIR${NC}"
    echo -e "${YELLOW}   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ${NC}\n"
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–∏—â–µ–º pnpm-workspace.yaml)
PROJECT_ROOT="$SCRIPT_DIR"

while [[ "$PROJECT_ROOT" != "/" ]]; do
    if [[ -f "$PROJECT_ROOT/pnpm-workspace.yaml" ]]; then
        break
    fi
    PROJECT_ROOT="$(dirname "$PROJECT_ROOT")"
done

if [[ ! -f "$PROJECT_ROOT/pnpm-workspace.yaml" ]]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (pnpm-workspace.yaml)${NC}"
    exit 1
fi

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOCKER_USERNAME="${DOCKER_USERNAME:-webusov}"
IMAGE_NAME="satellite-server"
PACKAGE_JSON="$PROJECT_ROOT/apps/server/package.json"
DOCKERFILE="$PROJECT_ROOT/apps/server/Dockerfile"
CONTEXT="$PROJECT_ROOT/apps/server"
FULL_IMAGE="${DOCKER_USERNAME}/${IMAGE_NAME}"

if [[ ! -f "$PACKAGE_JSON" ]]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω package.json${NC}"
    exit 1
fi

VERSION=$(grep -oP '(?<="version":\s")[^"]+' "$PACKAGE_JSON")
if [[ -z "$VERSION" ]]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ package.json${NC}"
    exit 1
fi

echo -e "${GREEN}üöÄ –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Proxy Server –æ–±—Ä–∞–∑–∞${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "Image: ${FULL_IMAGE}"
echo "Tags: latest, v${VERSION}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
echo -e "\n${YELLOW}üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Docker Hub...${NC}"
if ! grep -q "index.docker.io" ~/.docker/config.json 2>/dev/null; then
    echo -e "${RED}‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Docker Hub${NC}"
    echo -e "${YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker login${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞${NC}"

# –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∫–∏
BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
VCS_REF=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
echo -e "\n${YELLOW}üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞...${NC}"
echo "  –í–µ—Ä—Å–∏—è: v${VERSION}"
echo "  Git commit: ${VCS_REF}"
echo "  –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: ${BUILD_DATE}"
docker build \
    -f "${DOCKERFILE}" \
    -t "${FULL_IMAGE}:latest" \
    -t "${FULL_IMAGE}:v${VERSION}" \
    --build-arg VERSION="${VERSION}" \
    --build-arg BUILD_DATE="${BUILD_DATE}" \
    --build-arg VCS_REF="${VCS_REF}" \
    --platform linux/amd64 \
    "${CONTEXT}"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–∞${NC}"
    exit 1
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–µ
echo -e "\n${YELLOW}üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–µ:${NC}"
docker images "${FULL_IMAGE}" --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedSince}}"

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è
echo -e "\n${YELLOW}üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞ –≤ Docker Hub...${NC}"
docker push "${FULL_IMAGE}:latest"
docker push "${FULL_IMAGE}:v${VERSION}"

if [ $? -eq 0 ]; then
    echo -e "\n${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}‚úÖ Proxy –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!${NC}"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "\n${YELLOW}üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  docker pull ${FULL_IMAGE}:latest"
    echo "  docker run -p 3001:3001 -e N2YO_API_KEY=your_key ${FULL_IMAGE}:latest"
    echo ""
    echo -e "${YELLOW}üîó Docker Hub:${NC}"
    echo "  https://hub.docker.com/r/${FULL_IMAGE}"
    echo ""
    echo -e "${YELLOW}üöÄ –î–µ–ø–ª–æ–π –≤ Portainer:${NC}"
    echo "  ./deploy.sh"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–∞${NC}"
    exit 1
fi

